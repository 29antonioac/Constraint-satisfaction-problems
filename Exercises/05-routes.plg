noDuplicates(Lst) :-
    setof(X, member(X, Lst), Set),
    length(Lst, N),
    length(Set, N).

distTo(hamburg, bremen,80).
distTo(hamburg, berlin, 230).
distTo(bremen, dortmund, 200).
distTo(hannover, nuernberg, 380).
distTo(dortmund, koeln, 80).
distTo(kassel, frankfurt, 180).
distTo(nuernberg, muenchen, 160).
distTo(hamburg, hannover,110).
distTo(bremen, hannover,100).
distTo(hannover, kassel,140).
distTo(dortmund, kassel,130).
distTo(kassel, wuerzburg,180).
distTo(frankfurt, wuerzburg,110).

dist(From,To,Km) :-
    distTo(From,To,Km).
dist(From,To,Km) :-
    distTo(To,From,Km).

% route(From, To) :-
%     dist(From, To, _).
%
% route(From, To) :-
%     dist(From, Aux, _),
%     write(Aux),nl,
%     route(Aux, To).

route(From, To, Route) :-
    [] = Route,
    dist(From, To, _).

% route(From, To, Route) :-
%     is_set(Route),
%     [Head | Tail] = Route,
%     [] = Tail,
%     dist(From, Head, _),
%     dist(Head, To, _),
%     write('From '),write(From),
%     write(' to '),write(To),
%     write(' through '),write(Route),nl.

route(From, To, Route) :-
    nonvar(Route),
    % noDuplicates(Route),
    [Head | Tail] = Route,
    dist(From, Head, _),
    route(Head, To, Tail),
    From \= To,

    write('From '),write(From),
    write(' to '),write(To),
    write(' through '),write(Route),nl.


route(From, To, Route) :-
    var(Route),
    Route = [],
    route__(From, To, Route).

route__(From, To, Route) :-
    dist(From, To, _).

route__(From, To, Route) :-
    dist(From, Aux, _),
    \+ member(Aux, Route),
    append(Route, [Aux], NewRoute),
    route__(Aux, To, NewRoute),
    From \= To,

    write('From '),write(From),
    write(' to '),write(To),
    write(' through '),write(Route),nl.
